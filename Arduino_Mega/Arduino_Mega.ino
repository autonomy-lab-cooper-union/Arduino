/*** This is the code for the PID control system for both steering and velocity ***/
//inputs: Target steering angle and target speed from computer sent through ros
//output: PWM to both motor controllers

//Libraries
#include <PID_v1.h>
#include <ros.h>
#include <Arduino.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Int32.h>

ros::NodeHandle nh; //Every Arduino code using rosserial needs this, this is the node handle that will allow the program to create publishers and subscribers and take care of serial port communications.


//*** Below are important pin configurations and constant values for absolute encoder
// Red to power
// Black and Green to Ground
// Purple to 28
// White to 26
// Yellow to 24
#define PIN_CS 24  //chip  select pin
#define PIN_CLOCK 26  //clock pin
#define PIN_DATA 28  //digital output pin
#define MID_POINT 457  // This is the amount of ticks when steering pole is straight ahead. This may change if absolute encoder loosens!! So just rostopic echo fwheel-tick and adjust it.

//*** Below are the pin configurations for both back wheel encoders. A is Green wire, B is White wire, Z is Yellow wire, Red and Black are 5V VCC and GND.
#define encoder0PinA 2
#define encoder0PinB 3
#define encoder0PinZ 18
#define encoder1PinA 19
#define encoder1PinB 20
#define encoder1PinZ 21

//*** Pin configurations from Aruidno to motor controllers. "accel" means rear motor controller, "direc means" front motor controller. "PWM" is the PWM signal generated by the PID algorithm. DIR
//is the direction of the PWM signal (positive or negative)
#define accelPWM 9
#define accelDIR 8
#define direcPWM 6
#define direcDIR 7

//*** Parameters for Acceleration PID
#define kpA 20
#define kiA 10
#define kdA 1

//*** Parameters for Direction PID
#define kpD 3
#define kiD 0.4
#define kdD 0

/*
//*** Midpoint and threshold for steering
#define STEERING_MID 457
#define STEERING_MIN 380
#define STEERING_MAX 525 */


double vCurrent, vTarget; //current speed and target speed
double target_angle, front_angle; // target angle given by computer (to be converted from radians to ticks) and current steering angle in ticks
double accelpwm; //variable for PWM value for acceleration
double direcpwm; //variable for PWM value for direction

//*** PID Algorithm function using current speed/angle, target speed/angle, and three k-values to output a PWM value.
PID accelPID (&vCurrent, &accelpwm, &vTarget, kpA, kiA, kdA, DIRECT);
PID direcPID (&front_angle, &direcpwm, &target_angle, kpD, kiD, kdD, DIRECT);

volatile int encoder0Pos = 0; //Left back wheel encoder ticks, this will be negative so we use the negative of this value in the code

//int encoder0; //encoder0Pos before for testing CCW OR CW
//int encoder0_b; //mark the encoder0Pos when pulses change

volatile int encoder1Pos = 0; //Right back wheel encoder ticks, this will be positive

//int encoder1; //encoder1Pos before for testing CCW OR CW
//int encoder1_b; //mark the encoder0Pos when pulse changes (this means that a revolution for the rear wheel has passed)


//*** Rosserial define its own data types all under the package "std_msgs". These are the data that we need to send to the computer through ROS, so we initialize them using "std_msgs".
//std_msgs::String str_msg;
std_msgs::Float64 left_encoder;
std_msgs::Float64 right_encoder;
std_msgs::Int32 front_pwm;
std_msgs::Int32 front_target;
std_msgs::Int32 tick;
std_msgs::Int32 back_pwm;
std_msgs::Float64 front_rad;

int absencoderPos; //Numbers of ticks from absolute encoder
double left_speed; //Left back wheel speed, calculated from the encoder turn rate
double right_speed; //Right back wheel speed, calculated from the encoder turn rate
double left_tick, right_tick; //variables to record ticks of the back wheel encoders at the previously recorded time stamp (for calculating encoder turn rate)


//fetch current left wheel speed from ROS
/*void currentSpeed_left(const std_msgs::Float64 &val) {
  left_speed = val.data;
} */

//fetch current right wheel speed from ROS
/*void currentSpeed_right(const std_msgs::Float64 &val) {
  right_speed = val.data;
}*/

//fetch current RAW data from absolute encoder from ROS and convert it to radians
/*void currentRadian_front(const std_msgs::Int32 &val) {
  front_angle = (double)val.data;
}*/

//Receive target speed from computer as std_msgs type and store the value inside a double type variable.
void targetSpeed(const std_msgs::Float64 &val) {
  vTarget = val.data;
}

//Receive target speed from computer as std_msgs type and store the value inside a double type variable. Converts from radians to ticks.
void targetRadian(const std_msgs::Float64 &val) {
  target_angle = (val.data / (2*PI)) * 1024;
  //Here we limit the maximum target angle to the maximum turning angle of the steering pole.
  if (target_angle > 72)
  {
    target_angle = 72;
  }
  else if (target_angle < -72)
  {
    target_angle = -72;
  }
}


//Here we instantiate our publishers and subscribers
//To instantiate a publisher, ros::Publisher <publisher name>(<"topic name">, &<published variable>);
//To instantiate a subscriber, //ros::Subscriber<std_msgs::Data Type> <subscriber name>(<"topic name">, &updateVTarget);
//ros::Subscriber<std_msgs::Int32> pc_vTarget("motor_vTarget", &updateVTarget);
ros::Publisher lwheel_speed("lwheel_speed", &left_encoder); //left back wheel speed
ros::Publisher rwheel_speed("rwheel_speed", &right_encoder); //right back wheel speed
ros::Publisher fwheel_pwm("fwheel_pwm", &front_pwm); //PWM signal calculated by the PID algorithm and sent to the front motor controller
ros::Publisher bwheel_pwm("bwheel_pwm", &back_pwm); //PWM signal calculated by the PID algorithm and sent to the back motor controller
ros::Publisher target_tick("target_tick", &front_target); //target tick for the PID algorithm, we are publishing this to monitor it
ros::Publisher fwheel_tick("fwheel_tick", &tick); //current tick from the absolute encoder, we are publishing this for the same reason
ros::Publisher fwheel_rad("fwheel_rad", &front_rad);
ros::Subscriber<std_msgs::Float64> control_speed("control_speed", &targetSpeed); //target speed from computer
ros::Subscriber<std_msgs::Float64> control_steering("control_steering", &targetRadian); //target radians from computer

unsigned long pub_time;

void setup() {
  nh.initNode();  
  nh.advertise(lwheel_speed);
  nh.advertise(rwheel_speed);
  nh.advertise(fwheel_pwm);
  nh.advertise(bwheel_pwm);
  nh.advertise(target_tick);
  nh.advertise(fwheel_tick);
  nh.advertise(fwheel_rad);
  nh.subscribe(control_speed);
  nh.subscribe(control_steering);
  
  
  pinMode(encoder0PinA, INPUT);
  digitalWrite(encoder0PinA, HIGH);       // turn on pull-up resistor
  pinMode(encoder0PinB, INPUT);
  digitalWrite(encoder0PinB, HIGH);       // turn on pull-up resistor
  pinMode(encoder0PinZ, INPUT);
  digitalWrite(encoder0PinZ, HIGH);       // turn on pull-up resistor
  pinMode(encoder1PinA, INPUT);
  digitalWrite(encoder1PinA, HIGH);       // turn on pull-up resistor
  pinMode(encoder1PinB, INPUT);
  digitalWrite(encoder1PinB, HIGH);       // turn on pull-up resistor
  pinMode(encoder1PinZ, INPUT);
  digitalWrite(encoder1PinZ, HIGH);       // turn on pull-up resistor
  pinMode(PIN_CS, OUTPUT);
  pinMode(PIN_CLOCK, OUTPUT);
  pinMode(PIN_DATA, INPUT);
  digitalWrite(PIN_CLOCK, HIGH);
  digitalWrite(PIN_CS, LOW);
  pinMode(accelPWM, OUTPUT);
  pinMode(direcPWM, OUTPUT);
  pinMode(accelDIR, OUTPUT);
  pinMode(direcDIR, OUTPUT);
    
  attachInterrupt(digitalPinToInterrupt(encoder0PinA), doEncoder0A, RISING);  // Output channel A from encoder 0 -> interrupt pin 2
  //attachInterrupt(digitalPinToInterrupt(encoder0PinB), doEncoder0B, CHANGE);  // Output channel B from encoder 0 -> interrupt pin 3
//  attachInterrupt(digitalPinToInterrupt(encoder0PinZ), doEncoderC(0), RISING); // Output channel C from encoder 0 -> interrupt pin 18       
  attachInterrupt(digitalPinToInterrupt(encoder1PinA), doEncoder1A, RISING);  // Output channel A from encoder 1 -> interrupt pin 2
  //attachInterrupt(digitalPinToInterrupt(encoder1PinB), doEncoder1B, CHANGE);  // Output channel B from encoder 1 -> interrupt pin 3
//  attachInterrupt(digitalPinToInterrupt(encoder1PinZ), doEncoderC(1), RISING); // Output channel C from encoder 1 -> interrupt pin 18          
  
  //accept setPoint value from commands of PC
  //will it get update again if put in the setup() function?
  accelPID.SetMode(AUTOMATIC);
  direcPID.SetMode(AUTOMATIC);
  accelPID.SetOutputLimits(-255, 255);
  direcPID.SetOutputLimits(-255, 255);
  
  pub_time = millis();
  left_tick = 0;
  right_tick = 0;
}

void loop() {
  //Serial.print();
  //Serial.println((left_speed + right_speed) / 2);
  //Serial.print("encoder0Pos");
  Serial.println(-encoder0Pos);
  if(millis() - pub_time > 200) {
    left_speed = max((-encoder0Pos - left_tick)*PI*0.216/(8*(1000*0.2)), 0)/2; //ratio of encoder to wheel is 1:2 (shaft size)
    right_speed = max((encoder1Pos - right_tick)*PI*0.216/(8*(1000*0.2)), 0)/2;
    left_encoder.data = left_speed;
    right_encoder.data = left_speed;
    lwheel_speed.publish(&left_encoder);
    rwheel_speed.publish(&right_encoder);
    sendTicks();
    pub_time = millis();
    left_tick = -encoder0Pos;
    right_tick = encoder1Pos;
  }
  vCurrent = (left_speed + right_speed) / 2;
  //vCurrent = 0;
  front_target.data = target_angle;
  target_tick.publish(&front_target);
  updateVelocity();
  nh.spinOnce();
}

void sendTicks(){
  absencoderPos = 0;
  digitalWrite(PIN_CS, HIGH);
  digitalWrite(PIN_CS, LOW);
  for (int i=0; i<10; i++) {
    digitalWrite(PIN_CLOCK, LOW);
    delay(1);
    digitalWrite(PIN_CLOCK, HIGH);
    delay(1);

    absencoderPos = absencoderPos | digitalRead(PIN_DATA);

    if(i < 9) absencoderPos = absencoderPos << 1;
  }
  for (int i=0; i<6; i++) {
    digitalWrite(PIN_CLOCK, LOW);
    delay(1);
    digitalWrite(PIN_CLOCK, HIGH);
    delay(1);
  }
  digitalWrite(PIN_CLOCK, LOW);
  delay(1);
  digitalWrite(PIN_CLOCK, HIGH);
  delay(1);

  absencoderPos -= MID_POINT;
  absencoderPos = -absencoderPos;
  front_angle = absencoderPos;
  tick.data = absencoderPos;
  front_rad.data = absencoderPos*(2*PI)/1024;
  fwheel_tick.publish(&tick);
  fwheel_rad.publish(&front_rad);
}

void doEncoder0A() {
  /*  if (digitalRead(encoder0PinA) == HIGH){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse0++;
    } */
    if (digitalRead(encoder0PinA) == digitalRead(encoder0PinB)){
      encoder0Pos--;
    }
    else { 
      encoder0Pos++;
    }
/*    if (abs(encoder0) > abs(encoder0Pos)){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse0 = 0;
    }*/
}

void doEncoder1A() {
    /*if (digitalRead(encoder1PinA) == HIGH){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse1++;
    } */
    if (digitalRead(encoder1PinA) == digitalRead(encoder1PinB)){
      encoder1Pos--;
    }
    else { 
      encoder1Pos++;
    }
   /* if (abs(encoder1) > abs(encoder1Pos)){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse1 = 0;
    } */
}

void doEncoder0B() {
    if (digitalRead(encoder0PinA) == digitalRead(encoder0PinB)){
      encoder0Pos++;
    }
    else {
      encoder0Pos--;
    }
   /* if (abs(encoder0) > abs(encoder0Pos)){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse0 = 0;
    }  */
}

void doEncoder1B() {
      if (digitalRead(encoder1PinA) == digitalRead(encoder1PinB)){
      encoder1Pos++;
    }
    else {
      encoder1Pos--;
    }
   /* if (abs(encoder1) > abs(encoder1Pos)){  //Commented out because we no longer need to reset the pulse, computer takes care of speed calc
      pulse1 = 0;
    }  */
}

/*void doEncoderC(bool encoderNum) {
  if (encoderNum == 0){
    encoder0Pos = 0;
  }
  else{
    encoder1Pos = 0;
  }
}
*/


void updateVelocity(){
  
    accelPID.Compute();
    direcPID.Compute();
    front_pwm.data = direcpwm;
    fwheel_pwm.publish(&front_pwm);
    back_pwm.data = accelpwm;
    bwheel_pwm.publish(&back_pwm);
    updateAccel(accelpwm, direcpwm);
   /* Seril.println(pwm, DEC);
    analogWrite(PWM, pwm);
    String str_pwm = String(pwm);
    int str_pwm_length = str_pwm.length() + 1;
    char pwm_str_array[str_pwm_length];
    str_pwm.toCharArray(pwm_str_array, str_pwm_length);
    str_msg.data = pwm_str_array;
    pub_vTarget.publish(&str_msg); */
}

//Remember to check whether the directions are correct
void updateAccel(int accelpwm, int direcpwm) {
  if(accelpwm <= 0) {
    digitalWrite(accelDIR, HIGH);
  }
  else {
    digitalWrite(accelDIR, LOW);
  }
  
  if(direcpwm >= 0) {
    digitalWrite(direcDIR, HIGH);
  }
  else {
    digitalWrite(direcDIR, LOW);
  }
  
  analogWrite(accelPWM, abs(accelpwm));
  
  analogWrite(direcPWM, abs(direcpwm));
  
}
